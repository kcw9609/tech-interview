- 리모트 저장소 확인하기
$ git remote -v
단축이름과 url을 볼 수 있다

- 리모트 저장소 추가하기
$ git remote add <단축이름> <url>
$ git fetch <이름>
<이름> 저장소에 있는 것을 가져올 수 있다

- 리모트 저장소를 Pull하거나 Pull 하거나 Fetch하기
$ git fetch <remote>
로컬에는 없지만 리모트 저장소에는 있는 데이터를 모두 가져온다.
- 리모트 저장소에 Push하기
프로젝트를 공유하고 싶을 때 Upstream 저장소에 Push 할 수 있다
$ git push <리모트 저장소 이름> <브랜치 이름>

- 리모트 저장소 살표보기
$ git remote show <리모트 저장소 이름>

- 리모트 저장소 이름을 바꾸거나 리모트 저장소를 삭제하기
$ git remote remove <기존 이름> <바꿀 이름>
$ git remote remove <삭제할 이름>

- 태그
사람들은 보통 릴리즈할 때 사용한다
- 태그 조회하기
$ git tag
이미 만들어진 태그가 있는지 확인할 수 있다
- 태그 붙이기
--태그 종류
1. Lightweight와 
2. annotated태그로 두 종류가 있다

1.1 Lightweight태그는 브랜치와 비슷. 브랜치처럼 가리키는 지점을 최신 커밋으로 이동시키지 않는다
단순히 특정 커밋에 대한 포인터

2.1 annotated 태그는 Git 데이터베이스에 태그를 만든 사람의 이름, 이메일과 태그를 만든 날짜, 메시지도 저장

- Annotated 태그를 만드는 방법
$ git tag -a vi.4 -m "메세지"

- lightweight태그 만드는 방법
$ git tag v1.4 lw

- 태그 공유하기
git push명령은 자동으로 리모트 서버에 태그를 전송하지 않는다
별도로 push해야 한다
$ git push <리모트 이름> <태그 이름>
4 git push origin --tags
리모트 서버에 없는 태그를 모두 전송할 수 있다

- 태그를 Checkout하기
예를 들어 태그가 특정 버전을 가리키고 있고, 특정 버전의 파일을 체크아웃 해서 확인하고 싶다면 다음과 같이 실행한다. 
단 태그를 체크아웃하면(브랜치를 체크아웃 하는 것이 아니라면) 
“detached HEAD”(떨어져나온 HEAD) 상태가 되며 일부 Git 관련 작업이 브랜치에서 작업하는 것과 다르게 동작할 수 있다.
$ git checkout 2.0.0

$ git checkout -h version2 v2.0.0
특정 태그의 상태에서 새로 작성한 커밋이 버그 픽스와 같이 의미있도록 하려면 반드시 브랜치를 만들어서
작업하는게 좋다
이렇게 브랜치를 만든 후에version2 브랜치에 커밋하면 브랜치는 업데이트 된다
