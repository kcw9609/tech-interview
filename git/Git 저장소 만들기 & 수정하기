- 깃 저장소 생성 : 두 가지 경우
1. 아직 버전 관리를 하지 않은 로컬 디렉토리 하나를 선택해서 Git 저장소를 적용하는 방법
2. 다른 어딘가에서 Git 저장소를 Clone하는 방법

1-1. 기존 디렉토리를 Git저장소로 만들기
Linux
$ cd /home/user/my_project
Mac
$ cd /Users/user/my_project
Windows
$ cd /c/user/my_project

$ git init
-> .git 이라는 하위 디렉토리를 만든다. 필요한 뼈대 파일이 들어있다. 

2-1. 기존 저장소를 Clone 하기
다른 프로젝트에 참가하려거나(Contribute) Git 저장소를 복사하고 싶을 때 git clone 명령어 사용
$ git clone https://github.com/libgit2/libgit2
다른 디렉토리의 생성하고 싶을 때는 뒤에 폴더명을 지정해준다.
$ git clone https://github.com/libgit2/libgit2 mylibgit

- 수정하고 저장소에 저장하기
워킹 디렉토리의 모든 파일은 크게 Tracked와  Untracked로 나뉜다
Tracked파일은 이미 스냅샷에 포함돼 있던 파일이다.
Tracked파일은 Unmodified, Modified, Staged 상태 중 하나이다. = git이 알고 있는 파일
UnTracked파일은 위 경우 제와한 모든 파일이다.

- 파일의 상태 확인하기
& git status
- 파일을 새로 추적하기
$ git add 파일
- Modified 상태의 파일을 Stage 하기
이미 Tracked 상태인 파일을 수정하는 법
Staged 상태로 만들려면 git add 명령을 실행해야 한다.
Merge 할 때 충돌난 상태의 파일을 Resolve 상태로 만들때도 사용

-- 파일의 상태를 짤막하게 확인하기
$ git status -s 또는
$ git status --short
--예시
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M lib/simplegit.rb
?? LICENSE.txt

아직 추적하지 않은 새 파일 앞에는 ??가 붙는다.
Staged 상태로 추가한 파일 중 새로 생성한 파일 앞에는 A 표시
수정한 파일 앞에는 M 표시가 붙는다.

상태정보 컬럼
왼쪽 : Staging Area에서의 상태 표시
오른쪽 : Working Tree에서의 상태 표시

README 파일 : 내용을 변경했지만 아직 Staged상태로 추가하지는 않음
Rakefile 파일 : 변경하고 Staged 상태로 추가한 후 또 내용을 변경해서 Staged이면서 Unstaged 상태
lib/git.rb 파일 : 새로 생성 후 Staged 상태로 추가
lib/simplegit.rb 파일 : 내용을 변경하고 Staged 상태로 추가
LICENSE.txt : 아직 추적하지 않은 새 파일

- 파일 무시하기
어떤 파일은 Git이 관리할 필요가 없다. 보통 로그 파일이나 빌드 시스템이 자동으로 생성한 파일의 경우
.gitignore파일을 만들고 그 안에 무시할 파일 패턴을 적는다.
-- 예시1
$ cat .gitignore
*.[oa]
*~

첫번째 라인 : ".o"나 ".a"인 파일을 Git이 무시하라는 것
두번쨰 라인 : ~로 끝나는 모든 파일 무사
-- 예시2
# 확장자가 .a인 파일 무시
*.a

# 윗 라인에서 확장자가 .a인 파일은 무시하게 했지만 lib.a는 무시하지 않음
!lib.a

# 현재 디렉토리에 있는 TODO파일은 무시하고 subdir/TODO처럼 하위디렉토리에 있는 파일은 무시하지 않음
/TODO

# build/ 디렉토리에 있는 모든 파일은 무시
build/

# doc/notes.txt 파일은 무시하고 doc/server/arch.txt 파일은 무시하지 않음
doc/*.txt

# doc 디렉토리 아래의 모든 .pdf 파일을 무시
doc/**/*.pdf

- Staged와 Unstaged 상태의 변경 내용을 보기
$ git diff
워킹 디렉토리에 있는 것과 Staging Area에 있는 것을 비교하여 수정하고 아직 Stage 하지 않은 것을 보여준다
$ git diff --staged 또는
$ git diff --cached
커밋하려고 Staging Area에 넣은 파일의 변경 부분을 확인
위 명령어들은 마지막으로 커밋한 후에 수정한 것들 전부를 보여주지 않는다. Unstaged 상태인 것들만 보여준다

- 변경사항 커밋하기
수정한 것을 커밋하기 위해 Staging Area에 파일을 정리했다. 
$ git commit
$ git commit -m "메세지"
메세지를 인라인르로 첨부할 수도 있다.

- Staging Area 생략하기
$ git commit -a -m '메세지'

- 파일 삭제하기
Git에서 파일을 제거하려면 git rm 명령으로 Tracked 상태의 파일을 삭제한 후에(정확히는 Staging Area에서 삭제하는 것) 커밋해야 한다
이 명령은 디렉토리에 있는 파일도 삭제하기 때문에 실제로 파일도 지워진다.

$ rm PROJECTS.md
Git 명령을 사용하지 않고 단순히 워킹 디렉터리에서 파일을 삭제하고 git status 명령으로 상태를 확인하면 not staged라고 표시해준다

$ git rm PROJECTS.md
git rm 명령을 실행하면 삭제한 파일은 바로 Staged 상태가 된다.
커밋하면 파일은 삭제되고 Git은 이 파일을 더는 추적하지 않는다. 이미 파일을 수정했거나 Staging Area에 -f 옵션을 주어 강제로 삭제해야 한다. 이 점은 실수로 데이터를 삭제하지 못하도록 하는 안전장치다. 

$ git rm --cached README
또 Staging Area에서만 제거하고 워킹 디렉토리에 있는 파일은 지우지 않고 남겨둘 수 있다.

- 파일 이름 변경하기
$ git mv file_form file_to
위 명령은 아래의 명령어를 수행한 것과 같다.
git mv 명령은 일종의 단축 명령어이다. 편리하게 명령을 세번 실행해주는 것 뿐이다.
$ mv README.md README
$ git rm README.md
$ git add README
